{"ast":null,"code":"import Metaverse from \"metaversejs\";\nimport Blockchain from \"mvs-blockchain\";\nimport { clearIntervalAsync, setIntervalAsync } from \"set-interval-async/dynamic\";\nlet blockchain = Blockchain({\n  url: \"https://explorer-testnet.mvs.org/api/\"\n});\nlet faucetMnemonic = \"butter vacuum breeze glow virtual mutual veteran argue want pipe elite blast judge write sand toilet file joy exotic reflect truck topic receive wait\";\nlet wallet;\nlet faucet;\nlet addresses;\nexport const generateReceiverWallet = async mnemonic => {\n  if (!mnemonic) {\n    mnemonic = await Metaverse.wallet.generateMnemonic();\n  }\n\n  wallet = await Metaverse.wallet.fromMnemonic(mnemonic, \"testnet\");\n  addresses = await wallet.getAddresses();\n  return mnemonic;\n};\n\nconst generateFaucet = async () => {\n  faucet = await Metaverse.wallet.fromMnemonic(faucetMnemonic, \"testnet\");\n};\n\nconst getETPBalance = async () => {\n  let height = await blockchain.height();\n  let address = addresses[0]; //Get a list of wallet transactions\n\n  let txs = await blockchain.address.txs(address); //Get a list of unspent transaction outputs amongst your transactions\n\n  let utxo = await Metaverse.output.calculateUtxo(txs.transactions, address); //Calculate your balances based on the utxos\n\n  let balances = await blockchain.balance.all(utxo, addresses, height);\n  let ETPBalance = balances.ETP.available;\n  return ETPBalance;\n};\n\nconst sendETP = async (amount, recipient_address) => {\n  var target = {\n    ETP: amount //100 million units = 1 ETP\n\n  };\n  let height = await blockchain.height(); //Get a list of wallet transactions\n\n  let txs = await blockchain.addresses.txs((await faucet.getAddresses())); //Get all utxo\n\n  let utxos = await Metaverse.output.calculateUtxo(txs.transactions, (await faucet.getAddresses())); //Collect enough utxos to pay for the transfer\n\n  let result = await Metaverse.output.findUtxo(utxos, target, height); //Build the transaction object\n\n  let tx = await Metaverse.transaction_builder.send(result.utxo, recipient_address, undefined, target, result.utxo[0].address, result.change); //Sign the transaction with your wallet\n\n  tx = await faucet.sign(tx); //Encode the transaction into bytecode\n\n  tx = await tx.encode(); //Broadcast the transaction to the metaverse network.\n\n  tx = await blockchain.transaction.broadcast(tx.toString(\"hex\"));\n  return tx;\n};\n\nexport const registerAvatar = async (avatar_name, avatar_address) => {\n  let change_address = avatar_address;\n  let height = await blockchain.height();\n  let txs = await blockchain.addresses.txs(addresses);\n  let utxos = await Metaverse.output.calculateUtxo(txs.transactions, addresses); //Get all utxo for the avatar address\n\n  let result = await Metaverse.output.findUtxo(utxos, {}, height, 100000000); //Collect utxo to pay for the fee of 1 ETP\n\n  let tx = await Metaverse.transaction_builder.issueDid(result.utxo, avatar_address, avatar_name, change_address, result.change, 80000000, \"testnet\");\n  let avatar = await tx.outputs[0].attachment.symbol;\n  tx = await wallet.sign(tx);\n  tx = await tx.encode();\n  tx = await blockchain.transaction.broadcast(tx.toString(\"hex\"));\n  return avatar;\n};\nexport const getAvatar = async avatar => {\n  let avatarInfo = await blockchain.avatar.get(avatar);\n  return avatarInfo;\n};\nexport const withdraw = async userAvatar => {\n  try {\n    let balance = await getETPBalance();\n    console.log(balance);\n\n    if ((await balance) < 210000000) {\n      await generateFaucet();\n      await sendETP(200000000, addresses[0]);\n    }\n\n    let avatar = await new Promise(async (resolve, reject) => {\n      let timer = setIntervalAsync(async () => {\n        let addressInfo = await fetch(\"https://explorer-testnet.mvs.org/api/address/balance/ETP/\".concat(addresses[0]));\n        let jsonAddressInfo = await addressInfo.json();\n\n        if (jsonAddressInfo.result > 1) {\n          await clearIntervalAsync(timer);\n          resolve((await registerAvatar(userAvatar, addresses[0])));\n        }\n      }, 5000);\n    }).catch(function (err) {\n      setTimeout(function () {\n        throw err;\n      });\n    });\n    return avatar;\n  } catch (error) {\n    throw error;\n  }\n}; // export const withdraw = async userAvatar => {\n//   try {\n//     let balance = await getETPBalance();\n//     console.log(balance);\n//     if ((await balance) < 210000000) {\n//       await generateFaucet();\n//       await sendETP(200000000, addresses[0]);\n//     }\n//     let avatar = await new Promise((resolve, reject) => {\n//       setTimeout(async () => {\n//         resolve(registerAvatar(userAvatar, addresses[0]));\n//       }, 75000);\n//     });\n//     console.log(avatar, \"avatar in withdraw<==\");\n//     return avatar;\n//   } catch (err) {\n//     throw err;\n//   }\n// };\n\nexport const run = async userAvatar => {\n  try {\n    const mnemonic = await generateReceiverWallet();\n    const avatar = await withdraw(userAvatar);\n    console.log(avatar, \"avatar in run\");\n    return [mnemonic, avatar];\n  } catch (err) {\n    throw err;\n  }\n};","map":{"version":3,"sources":["/Users/alvandsadeghi/Desktop/Projects/Final CryptoCopyright/Crypto-Copyright/src/BlockchainLogic/Faucet.js"],"names":["Metaverse","Blockchain","clearIntervalAsync","setIntervalAsync","blockchain","url","faucetMnemonic","wallet","faucet","addresses","generateReceiverWallet","mnemonic","generateMnemonic","fromMnemonic","getAddresses","generateFaucet","getETPBalance","height","address","txs","utxo","output","calculateUtxo","transactions","balances","balance","all","ETPBalance","ETP","available","sendETP","amount","recipient_address","target","utxos","result","findUtxo","tx","transaction_builder","send","undefined","change","sign","encode","transaction","broadcast","toString","registerAvatar","avatar_name","avatar_address","change_address","issueDid","avatar","outputs","attachment","symbol","getAvatar","avatarInfo","get","withdraw","userAvatar","console","log","Promise","resolve","reject","timer","addressInfo","fetch","jsonAddressInfo","json","catch","err","setTimeout","error","run"],"mappings":"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","sourcesContent":["import Metaverse from \"metaversejs\";\nimport Blockchain from \"mvs-blockchain\";\nimport {\n  clearIntervalAsync,\n  setIntervalAsync\n} from \"set-interval-async/dynamic\";\n\nlet blockchain = Blockchain({ url: \"https://explorer-testnet.mvs.org/api/\" });\n\nlet faucetMnemonic =\n  \"butter vacuum breeze glow virtual mutual veteran argue want pipe elite blast judge write sand toilet file joy exotic reflect truck topic receive wait\";\nlet wallet;\nlet faucet;\nlet addresses;\n\nexport const generateReceiverWallet = async mnemonic => {\n  if (!mnemonic) {\n    mnemonic = await Metaverse.wallet.generateMnemonic();\n  }\n  wallet = await Metaverse.wallet.fromMnemonic(mnemonic, \"testnet\");\n  addresses = await wallet.getAddresses();\n  return mnemonic;\n};\n\nconst generateFaucet = async () => {\n  faucet = await Metaverse.wallet.fromMnemonic(faucetMnemonic, \"testnet\");\n};\n\nconst getETPBalance = async () => {\n  let height = await blockchain.height();\n  let address = addresses[0];\n  //Get a list of wallet transactions\n  let txs = await blockchain.address.txs(address);\n\n  //Get a list of unspent transaction outputs amongst your transactions\n  let utxo = await Metaverse.output.calculateUtxo(txs.transactions, address);\n\n  //Calculate your balances based on the utxos\n  let balances = await blockchain.balance.all(utxo, addresses, height);\n\n  let ETPBalance = balances.ETP.available;\n  return ETPBalance;\n};\n\nconst sendETP = async (amount, recipient_address) => {\n  var target = {\n    ETP: amount //100 million units = 1 ETP\n  };\n\n  let height = await blockchain.height();\n  //Get a list of wallet transactions\n  let txs = await blockchain.addresses.txs(await faucet.getAddresses());\n\n  //Get all utxo\n  let utxos = await Metaverse.output.calculateUtxo(\n    txs.transactions,\n    await faucet.getAddresses()\n  );\n  //Collect enough utxos to pay for the transfer\n  let result = await Metaverse.output.findUtxo(utxos, target, height);\n\n  //Build the transaction object\n  let tx = await Metaverse.transaction_builder.send(\n    result.utxo,\n    recipient_address,\n    undefined,\n    target,\n    result.utxo[0].address,\n    result.change\n  );\n  //Sign the transaction with your wallet\n  tx = await faucet.sign(tx);\n\n  //Encode the transaction into bytecode\n  tx = await tx.encode();\n\n  //Broadcast the transaction to the metaverse network.\n  tx = await blockchain.transaction.broadcast(tx.toString(\"hex\"));\n  return tx;\n};\n\nexport const registerAvatar = async (avatar_name, avatar_address) => {\n  let change_address = avatar_address;\n  let height = await blockchain.height();\n  let txs = await blockchain.addresses.txs(addresses);\n  let utxos = await Metaverse.output.calculateUtxo(txs.transactions, addresses); //Get all utxo for the avatar address\n  let result = await Metaverse.output.findUtxo(utxos, {}, height, 100000000); //Collect utxo to pay for the fee of 1 ETP\n  let tx = await Metaverse.transaction_builder.issueDid(\n    result.utxo,\n    avatar_address,\n    avatar_name,\n    change_address,\n    result.change,\n    80000000,\n    \"testnet\"\n  );\n  let avatar = await tx.outputs[0].attachment.symbol;\n  tx = await wallet.sign(tx);\n  tx = await tx.encode();\n  tx = await blockchain.transaction.broadcast(tx.toString(\"hex\"));\n  return avatar;\n};\n\nexport const getAvatar = async avatar => {\n  let avatarInfo = await blockchain.avatar.get(avatar);\n  return avatarInfo;\n};\n\nexport const withdraw = async userAvatar => {\n  try {\n    let balance = await getETPBalance();\n    console.log(balance);\n    if ((await balance) < 210000000) {\n      await generateFaucet();\n      await sendETP(200000000, addresses[0]);\n    }\n    let avatar = await new Promise(async (resolve, reject) => {\n      let timer = setIntervalAsync(async () => {\n        let addressInfo = await fetch(\n          `https://explorer-testnet.mvs.org/api/address/balance/ETP/${addresses[0]}`\n        );\n        let jsonAddressInfo = await addressInfo.json();\n        \n        if (jsonAddressInfo.result > 1) {\n          await clearIntervalAsync(timer);\n          resolve(await registerAvatar(userAvatar, addresses[0]));\n        }\n      }, 5000);\n    }).catch(function(err) {\n      setTimeout(function() {\n        throw err;\n      });\n    });\n    return avatar;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// export const withdraw = async userAvatar => {\n//   try {\n//     let balance = await getETPBalance();\n//     console.log(balance);\n//     if ((await balance) < 210000000) {\n//       await generateFaucet();\n//       await sendETP(200000000, addresses[0]);\n//     }\n\n//     let avatar = await new Promise((resolve, reject) => {\n//       setTimeout(async () => {\n//         resolve(registerAvatar(userAvatar, addresses[0]));\n//       }, 75000);\n//     });\n\n//     console.log(avatar, \"avatar in withdraw<==\");\n//     return avatar;\n//   } catch (err) {\n//     throw err;\n//   }\n// };\n\nexport const run = async userAvatar => {\n  try {\n    const mnemonic = await generateReceiverWallet();\n    const avatar = await withdraw(userAvatar);\n    console.log(avatar, \"avatar in run\");\n    return [mnemonic, avatar];\n  } catch (err) {\n    throw err;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}