{"ast":null,"code":"const Metaverse = require('metaversejs');\n\nmodule.exports = {\n  balances: {\n    all: calculateBalancesFromUtxo,\n    addresses: calculateAddressesBalancesFromUtxo\n  },\n  avatar: {\n    extract: extractAvatars\n  }\n};\n\nfunction extractAvatars(outputs) {\n  return new Promise(resolve => {\n    let avatars = [];\n    outputs.forEach(output => {\n      switch (output.attachment.type) {\n        case Metaverse.constants.ATTACHMENT.TYPE.AVATAR:\n        case 'did-register':\n        case 'did-transfer':\n          avatars.push({\n            symbol: output.attachment.symbol,\n            address: output.attachment.address\n          });\n      }\n    });\n    resolve(avatars);\n  });\n}\n\nfunction calculateBalancesFromUtxo(utxo, addresses, height, init) {\n  if (init == undefined) init = {\n    ETP: {\n      available: 0,\n      frozen: 0,\n      decimals: 8\n    },\n    MST: {},\n    MIT: []\n  };\n  return utxo.reduce((acc, output) => {\n    if (addresses.indexOf(output.address) !== -1) {\n      switch (output.attachment.type) {\n        case Metaverse.constants.ATTACHMENT.TYPE.MST:\n        case 'asset-transfer':\n        case 'asset-issue':\n          if (acc.MST[output.attachment.symbol] == undefined) acc.MST[output.attachment.symbol] = {\n            available: 0,\n            frozen: 0,\n            decimals: output.attachment.decimals\n          };\n          let available = Metaverse.output.assetSpendable(output, output.height, height);\n          acc.MST[output.attachment.symbol].available += available;\n          acc.MST[output.attachment.symbol].frozen += output.attachment.quantity - available;\n          break;\n\n        case Metaverse.constants.ATTACHMENT.TYPE.MIT:\n        case 'mit':\n          acc.MIT.push({\n            symbol: output.attachment.symbol,\n            address: output.attachment.address,\n            content: output.attachment.content,\n            owner: output.attachment.to_did,\n            status: output.attachment.status\n          });\n          break;\n      }\n\n      if (output.value) {\n        if (output.locked_until > height) acc['ETP'].frozen += output.value;else acc['ETP'].available += output.value;\n      }\n    }\n\n    return acc;\n  }, init);\n}\n\nfunction calculateAddressesBalancesFromUtxo(utxo, addresses, height, init) {\n  if (init == undefined) init = {};\n  return utxo.reduce((acc, output) => {\n    if (acc[output.address] == undefined) acc[output.address] = {\n      ETP: {\n        available: 0,\n        frozen: 0,\n        decimals: 8\n      },\n      MST: {},\n      MIT: [],\n      AVATAR: \"\"\n    };\n\n    if (addresses.indexOf(output.address) !== -1) {\n      switch (output.attachment.type) {\n        case Metaverse.constants.ATTACHMENT.TYPE.MST:\n        case 'asset-transfer':\n        case 'asset-issue':\n          if (acc[output.address]['MST'][output.attachment.symbol] == undefined) acc[output.address]['MST'][output.attachment.symbol] = {\n            available: 0,\n            frozen: 0,\n            decimals: output.attachment.decimals\n          };\n          let available = Metaverse.output.assetSpendable(output, output.height, height);\n          acc[output.address]['MST'][output.attachment.symbol].available += available;\n          acc[output.address]['MST'][output.attachment.symbol].frozen += output.attachment.quantity - available;\n          break;\n\n        case Metaverse.constants.ATTACHMENT.TYPE.MIT:\n        case 'mit':\n          acc[output.address].MIT.push({\n            symbol: output.attachment.symbol,\n            address: output.attachment.address,\n            content: output.attachment.content,\n            owner: output.attachment.to_did,\n            status: output.attachment.status\n          });\n          break;\n\n        case Metaverse.constants.ATTACHMENT.TYPE.AVATAR:\n        case 'did-register':\n          acc[output.address].AVATAR = output.attachment.symbol;\n          break;\n      }\n\n      if (output.value) {\n        if (output.locked_until > height) acc[output.address]['ETP'].frozen += output.value;else acc[output.address]['ETP'].available += output.value;\n      }\n    }\n\n    return acc;\n  }, init);\n}","map":null,"metadata":{},"sourceType":"script"}