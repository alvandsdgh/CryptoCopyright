{"ast":null,"code":"import * as idb from \"idb\";\n\nlet initDB = async () => {\n  let db = await idb.openDB(\"mvs\", 1, {\n    upgrade(db, oldVersion) {\n      db.createObjectStore(\"wallet\");\n      console.log(oldVersion);\n    }\n\n  });\n  return db;\n};\n\nlet dbExist = async () => {\n  console.log(1);\n  await idb.openDB(\"mvs\", 1, {\n    upgrade(db, oldVersion) {\n      db.createObjectStore(\"wallet\");\n      console.log(oldVersion);\n    }\n\n  });\n};\n\nlet addItem = async (key, value) => {\n  try {\n    let db = await initDB();\n\n    if (Array.isArray(key)) {\n      const tx = db.transaction(\"wallet\", \"readwrite\");\n      key.forEach((item, index) => {\n        tx.store.add(value[index], item);\n      });\n      await tx.done;\n    } else {\n      await db.add(\"wallet\", value, key);\n    }\n  } catch (error) {\n    console.error(\"IDB ERROR: \", error);\n  }\n};\n\nlet getItem = async key => {\n  let db = await initDB();\n  let items = db.get(\"wallet\", key);\n  return items;\n};\n\nlet updateItem = async (key, value) => {\n  console.log(\"UPDATE IDB\");\n  let db = await initDB();\n  await db.put(\"wallet\", value, key);\n};\n\nlet deleteItem = async key => {\n  let db = await initDB();\n  await db.delete(\"wallet\", key);\n};\n\nexport { initDB, dbExist, addItem, getItem, updateItem, deleteItem };","map":{"version":3,"sources":["/Users/alvandsadeghi/Desktop/Projects/Final CryptoCopyright/Crypto-Copyright/src/utils/idb.js"],"names":["idb","initDB","db","openDB","upgrade","oldVersion","createObjectStore","console","log","dbExist","addItem","key","value","Array","isArray","tx","transaction","forEach","item","index","store","add","done","error","getItem","items","get","updateItem","put","deleteItem","delete"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;;AAEA,IAAIC,MAAM,GAAG,YAAY;AACvB,MAAIC,EAAE,GAAG,MAAMF,GAAG,CAACG,MAAJ,CAAW,KAAX,EAAkB,CAAlB,EAAqB;AAClCC,IAAAA,OAAO,CAACF,EAAD,EAAKG,UAAL,EAAiB;AACtBH,MAAAA,EAAE,CAACI,iBAAH,CAAqB,QAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AACD;;AAJiC,GAArB,CAAf;AAMA,SAAOH,EAAP;AACD,CARD;;AAUA,IAAIO,OAAO,GAAG,YAAY;AACxBF,EAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACA,QAAMR,GAAG,CAACG,MAAJ,CAAW,KAAX,EAAkB,CAAlB,EAAqB;AACzBC,IAAAA,OAAO,CAACF,EAAD,EAAKG,UAAL,EAAiB;AACtBH,MAAAA,EAAE,CAACI,iBAAH,CAAqB,QAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AACD;;AAJwB,GAArB,CAAN;AAMD,CARD;;AAUA,IAAIK,OAAO,GAAG,OAAOC,GAAP,EAAYC,KAAZ,KAAsB;AAClC,MAAI;AACF,QAAIV,EAAE,GAAG,MAAMD,MAAM,EAArB;;AACA,QAAIY,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAJ,EAAwB;AACtB,YAAMI,EAAE,GAAGb,EAAE,CAACc,WAAH,CAAe,QAAf,EAAyB,WAAzB,CAAX;AACAL,MAAAA,GAAG,CAACM,OAAJ,CAAY,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3BJ,QAAAA,EAAE,CAACK,KAAH,CAASC,GAAT,CAAaT,KAAK,CAACO,KAAD,CAAlB,EAA2BD,IAA3B;AACD,OAFD;AAIA,YAAMH,EAAE,CAACO,IAAT;AACD,KAPD,MAOO;AACL,YAAMpB,EAAE,CAACmB,GAAH,CAAO,QAAP,EAAiBT,KAAjB,EAAwBD,GAAxB,CAAN;AACD;AACF,GAZD,CAYE,OAAOY,KAAP,EAAc;AACdhB,IAAAA,OAAO,CAACgB,KAAR,CAAc,aAAd,EAA6BA,KAA7B;AACD;AACF,CAhBD;;AAkBA,IAAIC,OAAO,GAAG,MAAMb,GAAN,IAAa;AACzB,MAAIT,EAAE,GAAG,MAAMD,MAAM,EAArB;AACA,MAAIwB,KAAK,GAAGvB,EAAE,CAACwB,GAAH,CAAO,QAAP,EAAiBf,GAAjB,CAAZ;AAEA,SAAOc,KAAP;AACD,CALD;;AAOA,IAAIE,UAAU,GAAG,OAAOhB,GAAP,EAAYC,KAAZ,KAAsB;AACrCL,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,MAAIN,EAAE,GAAG,MAAMD,MAAM,EAArB;AACA,QAAMC,EAAE,CAAC0B,GAAH,CAAO,QAAP,EAAiBhB,KAAjB,EAAwBD,GAAxB,CAAN;AACD,CAJD;;AAMA,IAAIkB,UAAU,GAAG,MAAMlB,GAAN,IAAa;AAC5B,MAAIT,EAAE,GAAG,MAAMD,MAAM,EAArB;AACA,QAAMC,EAAE,CAAC4B,MAAH,CAAU,QAAV,EAAoBnB,GAApB,CAAN;AACD,CAHD;;AAKA,SAASV,MAAT,EAAiBQ,OAAjB,EAA0BC,OAA1B,EAAmCc,OAAnC,EAA4CG,UAA5C,EAAwDE,UAAxD","sourcesContent":["import * as idb from \"idb\";\n\nlet initDB = async () => {\n  let db = await idb.openDB(\"mvs\", 1, {\n    upgrade(db, oldVersion) {\n      db.createObjectStore(\"wallet\");\n      console.log(oldVersion);\n    }\n  });\n  return db;\n};\n\nlet dbExist = async () => {\n  console.log(1);\n  await idb.openDB(\"mvs\", 1, {\n    upgrade(db, oldVersion) {\n      db.createObjectStore(\"wallet\");\n      console.log(oldVersion);\n    }\n  });\n};\n\nlet addItem = async (key, value) => {\n  try {\n    let db = await initDB();\n    if (Array.isArray(key)) {\n      const tx = db.transaction(\"wallet\", \"readwrite\");\n      key.forEach((item, index) => {\n        tx.store.add(value[index], item);\n      });\n\n      await tx.done;\n    } else {\n      await db.add(\"wallet\", value, key);\n    }\n  } catch (error) {\n    console.error(\"IDB ERROR: \", error);\n  }\n};\n\nlet getItem = async key => {\n  let db = await initDB();\n  let items = db.get(\"wallet\", key);\n\n  return items;\n};\n\nlet updateItem = async (key, value) => {\n  console.log(\"UPDATE IDB\");\n  let db = await initDB();\n  await db.put(\"wallet\", value, key);\n};\n\nlet deleteItem = async key => {\n  let db = await initDB();\n  await db.delete(\"wallet\", key);\n};\n\nexport { initDB, dbExist, addItem, getItem, updateItem, deleteItem };\n"]},"metadata":{},"sourceType":"module"}