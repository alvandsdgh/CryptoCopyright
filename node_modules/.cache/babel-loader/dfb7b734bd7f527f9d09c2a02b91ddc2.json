{"ast":null,"code":"import { PROVE, PROVE_ERR_MESSAGE } from \"./types\";\nimport { BaseURL } from \"./BaseURL\";\nimport axios from \"axios\";\nexport const getProveAction = (hash, crtl) => dispatch => {\n  axios.get(BaseURL + \"/prove?hash=\" + hash).then(res => {\n    dispatch({\n      type: PROVE,\n      payload: res.data\n    });\n\n    if (res.data) {\n      crtl.setState({\n        loading: false\n      });\n    }\n  }).catch(err => {\n    dispatch({\n      type: PROVE_ERR_MESSAGE,\n      payload: err.response.data\n    });\n\n    if (err) {\n      crtl.setState({\n        loading: false\n      });\n    }\n  });\n};","map":{"version":3,"sources":["/Users/alvandsadeghi/Desktop/Projects/Final CryptoCopyright/Crypto-Copyright/src/Actions/getProve.js"],"names":["PROVE","PROVE_ERR_MESSAGE","BaseURL","axios","getProveAction","hash","crtl","dispatch","get","then","res","type","payload","data","setState","loading","catch","err","response"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,iBAAhB,QAAyC,SAAzC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,cAAc,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgBC,QAAQ,IAAI;AACxDJ,EAAAA,KAAK,CACFK,GADH,CACON,OAAO,GAAG,cAAV,GAA2BG,IADlC,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACXH,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEX,KADC;AAEPY,MAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,KAAD,CAAR;;AAIA,QAAIH,GAAG,CAACG,IAAR,EAAc;AACZP,MAAAA,IAAI,CAACQ,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD;AACF,GAVH,EAWGC,KAXH,CAWSC,GAAG,IAAI;AACZV,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEV,iBADC;AAEPW,MAAAA,OAAO,EAAEK,GAAG,CAACC,QAAJ,CAAaL;AAFf,KAAD,CAAR;;AAIA,QAAII,GAAJ,EAAS;AACPX,MAAAA,IAAI,CAACQ,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD;AACF,GAnBH;AAoBD,CArBM","sourcesContent":["import { PROVE, PROVE_ERR_MESSAGE } from \"./types\";\nimport { BaseURL } from \"./BaseURL\";\nimport axios from \"axios\";\n\nexport const getProveAction = (hash, crtl) => dispatch => {\n  axios\n    .get(BaseURL + \"/prove?hash=\" + hash)\n    .then(res => {\n      dispatch({\n        type: PROVE,\n        payload: res.data\n      });\n      if (res.data) {\n        crtl.setState({ loading: false });\n      }\n    })\n    .catch(err => {\n      dispatch({\n        type: PROVE_ERR_MESSAGE,\n        payload: err.response.data\n      });\n      if (err) {\n        crtl.setState({ loading: false });\n      }\n    });\n};\n"]},"metadata":{},"sourceType":"module"}