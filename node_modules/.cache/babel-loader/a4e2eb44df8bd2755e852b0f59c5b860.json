{"ast":null,"code":"import Metaverse from \"metaversejs\";\nimport Blockchain from \"mvs-blockchain\";\nlet blockchain = Blockchain({\n  url: \"https://explorer-testnet.mvs.org/api/\"\n}); //create new MIT\n\nexport async function issueMIT(wallet, content, symbolHash) {\n  let addresses = await wallet.getAddresses();\n  /*issuer avatar -> recipient address & change_address are the same.*/\n\n  let avatar = await blockchain.avatar.get(addresses[0]);\n  let height = await blockchain.height();\n  let txs = await blockchain.addresses.txs(wallet.getAddresses());\n  let utxos = await Metaverse.output.calculateUtxo(txs.transactions, [addresses[0]]); //Get all utxo\n\n  let result = await Metaverse.output.findUtxo(utxos, {}, height, 10000); //Collect utxo to pay fee of 0.0001 ETP\n\n  let tx = await Metaverse.transaction_builder.registerMIT(result.utxo, addresses[0], avatar.symbol, symbolHash, content, addresses[0], result.change);\n  tx = await wallet.sign(tx);\n  tx = await tx.encode();\n  tx = await blockchain.transaction.broadcast(tx.toString(\"hex\")); // .then(tx=>tx.toString('hex'))\n}\n/*\n//Transfer MIT To Selected avatar not address\nasync function sendMIT() {\n  let MITIndex = MITSelect[MITSelect.selectedIndex].value;\n  console.log(MITIndex, \"MITIndex\");\n\n  let symbol = MITData[MITIndex].symbol;\n\n  let recipient_avatar = document.getElementById(\"sendTo\").value;\n\n  let recipient_address = await getAvatar(recipient_avatar);\n\n  let sender_avatar = MITData[MITIndex].owner;\n  let sender_address = await getAvatar(sender_avatar);\n  let change_address = sender_address;\n\n  console.log(recipient_address, \"recipient_address\");\n  console.log(symbol, \"symbol\");\n  console.log(sender_address, \"sender_address\");\n  let height = await blockchain.height();\n  let txs = await blockchain.addresses.txs(addresses);\n  let utxos = await Metaverse.output.calculateUtxo(txs.transactions, [\n    sender_address\n  ]); //Get all utxo\n  //console.log(utxos)\n\n  let results = await Promise.all([\n    Metaverse.output.findUtxo(utxos, {}, height),\n    Metaverse.output.filter(utxos, {\n      symbol: symbol\n    })\n  ]);\n\n  let tx = await Metaverse.transaction_builder.transferMIT(\n    results[0].utxo.concat(results[1]),\n    sender_avatar,\n    recipient_address,\n    recipient_avatar,\n    symbol,\n    change_address,\n    results[0].change\n  );\n  tx = await wallet.sign(tx);\n\n  tx = await tx.encode();\n\n  tx = await blockchain.transaction.broadcast(tx.toString(\"hex\"));\n\n  console.log(tx, \"tx\"); //<- just the hash\n}\n*/\n\nexport const getMits = async addressArray => {\n  //Get the lastest Blockchain Length\n  let height = await blockchain.height(); //Get a list of wallet transactions\n\n  let txs = await blockchain.addresses.txs(addressArray); //Get a list of unspent transaction outputs amongst your transactions\n\n  let utxo = await Metaverse.output.calculateUtxo(txs.transactions, addressArray[0]); //Calculate your balances based on the utxos\n\n  let balances = await blockchain.balance.all(utxo, addressArray[0], height);\n  return balances.MIT.map(mit => mit, \"balances\");\n};","map":{"version":3,"sources":["/Users/alvandsadeghi/Desktop/Projects/Final CryptoCopyright/Crypto-Copyright/src/BlockchainLogic/MitLogic.js"],"names":["Metaverse","Blockchain","blockchain","url","issueMIT","wallet","content","symbolHash","addresses","getAddresses","avatar","get","height","txs","utxos","output","calculateUtxo","transactions","result","findUtxo","tx","transaction_builder","registerMIT","utxo","symbol","change","sign","encode","transaction","broadcast","toString","getMits","addressArray","balances","balance","all","MIT","map","mit"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AAEA,IAAIC,UAAU,GAAGD,UAAU,CAAC;AAC1BE,EAAAA,GAAG,EAAE;AADqB,CAAD,CAA3B,C,CAIA;;AACA,OAAO,eAAeC,QAAf,CAAwBC,MAAxB,EAAgCC,OAAhC,EAAyCC,UAAzC,EAAqD;AAC1D,MAAIC,SAAS,GAAG,MAAMH,MAAM,CAACI,YAAP,EAAtB;AAEA;;AACA,MAAIC,MAAM,GAAG,MAAMR,UAAU,CAACQ,MAAX,CAAkBC,GAAlB,CAAsBH,SAAS,CAAC,CAAD,CAA/B,CAAnB;AAEA,MAAII,MAAM,GAAG,MAAMV,UAAU,CAACU,MAAX,EAAnB;AACA,MAAIC,GAAG,GAAG,MAAMX,UAAU,CAACM,SAAX,CAAqBK,GAArB,CAAyBR,MAAM,CAACI,YAAP,EAAzB,CAAhB;AACA,MAAIK,KAAK,GAAG,MAAMd,SAAS,CAACe,MAAV,CAAiBC,aAAjB,CAA+BH,GAAG,CAACI,YAAnC,EAAiD,CACjET,SAAS,CAAC,CAAD,CADwD,CAAjD,CAAlB,CAR0D,CAUtD;;AACJ,MAAIU,MAAM,GAAG,MAAMlB,SAAS,CAACe,MAAV,CAAiBI,QAAjB,CAA0BL,KAA1B,EAAiC,EAAjC,EAAqCF,MAArC,EAA6C,KAA7C,CAAnB,CAX0D,CAWc;;AACxE,MAAIQ,EAAE,GAAG,MAAMpB,SAAS,CAACqB,mBAAV,CAA8BC,WAA9B,CACbJ,MAAM,CAACK,IADM,EAEbf,SAAS,CAAC,CAAD,CAFI,EAGbE,MAAM,CAACc,MAHM,EAIbjB,UAJa,EAKbD,OALa,EAMbE,SAAS,CAAC,CAAD,CANI,EAObU,MAAM,CAACO,MAPM,CAAf;AASAL,EAAAA,EAAE,GAAG,MAAMf,MAAM,CAACqB,IAAP,CAAYN,EAAZ,CAAX;AACAA,EAAAA,EAAE,GAAG,MAAMA,EAAE,CAACO,MAAH,EAAX;AACAP,EAAAA,EAAE,GAAG,MAAMlB,UAAU,CAAC0B,WAAX,CAAuBC,SAAvB,CAAiCT,EAAE,CAACU,QAAH,CAAY,KAAZ,CAAjC,CAAX,CAvB0D,CAwB1D;AACD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,OAAO,MAAMC,OAAO,GAAG,MAAMC,YAAN,IAAsB;AAC3C;AACA,MAAIpB,MAAM,GAAG,MAAMV,UAAU,CAACU,MAAX,EAAnB,CAF2C,CAI3C;;AACA,MAAIC,GAAG,GAAG,MAAMX,UAAU,CAACM,SAAX,CAAqBK,GAArB,CAAyBmB,YAAzB,CAAhB,CAL2C,CAO3C;;AACA,MAAIT,IAAI,GAAG,MAAMvB,SAAS,CAACe,MAAV,CAAiBC,aAAjB,CACfH,GAAG,CAACI,YADW,EAEfe,YAAY,CAAC,CAAD,CAFG,CAAjB,CAR2C,CAa3C;;AACA,MAAIC,QAAQ,GAAG,MAAM/B,UAAU,CAACgC,OAAX,CAAmBC,GAAnB,CAAuBZ,IAAvB,EAA6BS,YAAY,CAAC,CAAD,CAAzC,EAA8CpB,MAA9C,CAArB;AACA,SAAOqB,QAAQ,CAACG,GAAT,CAAaC,GAAb,CAAiBC,GAAG,IAAIA,GAAxB,EAA6B,UAA7B,CAAP;AACD,CAhBM","sourcesContent":["import Metaverse from \"metaversejs\";\nimport Blockchain from \"mvs-blockchain\";\n\nlet blockchain = Blockchain({\n  url: \"https://explorer-testnet.mvs.org/api/\"\n});\n\n//create new MIT\nexport async function issueMIT(wallet, content, symbolHash) {\n  let addresses = await wallet.getAddresses();\n\n  /*issuer avatar -> recipient address & change_address are the same.*/\n  let avatar = await blockchain.avatar.get(addresses[0]);\n\n  let height = await blockchain.height();\n  let txs = await blockchain.addresses.txs(wallet.getAddresses());\n  let utxos = await Metaverse.output.calculateUtxo(txs.transactions, [\n    addresses[0]\n  ]); //Get all utxo\n  let result = await Metaverse.output.findUtxo(utxos, {}, height, 10000); //Collect utxo to pay fee of 0.0001 ETP\n  let tx = await Metaverse.transaction_builder.registerMIT(\n    result.utxo,\n    addresses[0],\n    avatar.symbol,\n    symbolHash,\n    content,\n    addresses[0],\n    result.change\n  );\n  tx = await wallet.sign(tx);\n  tx = await tx.encode();\n  tx = await blockchain.transaction.broadcast(tx.toString(\"hex\"));\n  // .then(tx=>tx.toString('hex'))\n}\n/*\n//Transfer MIT To Selected avatar not address\nasync function sendMIT() {\n  let MITIndex = MITSelect[MITSelect.selectedIndex].value;\n  console.log(MITIndex, \"MITIndex\");\n\n  let symbol = MITData[MITIndex].symbol;\n\n  let recipient_avatar = document.getElementById(\"sendTo\").value;\n\n  let recipient_address = await getAvatar(recipient_avatar);\n\n  let sender_avatar = MITData[MITIndex].owner;\n  let sender_address = await getAvatar(sender_avatar);\n  let change_address = sender_address;\n\n  console.log(recipient_address, \"recipient_address\");\n  console.log(symbol, \"symbol\");\n  console.log(sender_address, \"sender_address\");\n  let height = await blockchain.height();\n  let txs = await blockchain.addresses.txs(addresses);\n  let utxos = await Metaverse.output.calculateUtxo(txs.transactions, [\n    sender_address\n  ]); //Get all utxo\n  //console.log(utxos)\n\n  let results = await Promise.all([\n    Metaverse.output.findUtxo(utxos, {}, height),\n    Metaverse.output.filter(utxos, {\n      symbol: symbol\n    })\n  ]);\n\n  let tx = await Metaverse.transaction_builder.transferMIT(\n    results[0].utxo.concat(results[1]),\n    sender_avatar,\n    recipient_address,\n    recipient_avatar,\n    symbol,\n    change_address,\n    results[0].change\n  );\n  tx = await wallet.sign(tx);\n\n  tx = await tx.encode();\n\n  tx = await blockchain.transaction.broadcast(tx.toString(\"hex\"));\n\n  console.log(tx, \"tx\"); //<- just the hash\n}\n*/\nexport const getMits = async addressArray => {\n  //Get the lastest Blockchain Length\n  let height = await blockchain.height();\n\n  //Get a list of wallet transactions\n  let txs = await blockchain.addresses.txs(addressArray);\n\n  //Get a list of unspent transaction outputs amongst your transactions\n  let utxo = await Metaverse.output.calculateUtxo(\n    txs.transactions,\n    addressArray[0]\n  );\n\n  //Calculate your balances based on the utxos\n  let balances = await blockchain.balance.all(utxo, addressArray[0], height);\n  return balances.MIT.map(mit => mit, \"balances\");\n};\n"]},"metadata":{},"sourceType":"module"}