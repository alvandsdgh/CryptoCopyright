{"ast":null,"code":"const crypto = require(\"crypto\");\n\nconst aes = require(\"aes-js\");\n\nlet hashFileWithSalt256 = (buffer, salt) => {\n  if (typeof salt === 'undefined') {\n    salt = crypto.randomBytes(16);\n  }\n\n  let hash = crypto.createHash(\"sha256\");\n  let hashDigest = hash.update(Buffer.concat([buffer, salt])).digest('hex');\n  return {\n    hashDigest,\n    salt\n  };\n};\n\nlet verifyHashFileWithSalt256 = (hash, salt, buffer) => {\n  let hashDigest = crypto.createHash(\"sha256\").update(Buffer.concat([buffer, salt])).digest(\"hex\");\n  return hash === hashDigest;\n};\n\nlet keyString256 = (password, salt) => {\n  if (typeof salt === 'undefined') {\n    salt = crypto.randomBytes(16);\n  }\n\n  let key = crypto.createHash(\"sha256\").update(password).digest();\n  return {\n    key,\n    salt\n  };\n};\n\nlet aesEncrypt = (key, value) => {\n  try {\n    let valueBytes = aes.utils.utf8.toBytes(value);\n    let aesCtr = new aes.ModeOfOperation.ctr(key, new aes.Counter(5));\n    let encryptedBytes = aesCtr.encrypt(valueBytes);\n    return aes.utils.hex.fromBytes(encryptedBytes);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nlet aesDecrypt = (givenKey, encryptedHex) => {\n  let encryptedBytes = aes.utils.hex.toBytes(encryptedHex);\n\n  try {\n    let aesCtr = new aes.ModeOfOperation.ctr(givenKey, new aes.Counter(5));\n    let decryptedBytes = aesCtr.decrypt(encryptedBytes);\n    return aes.utils.utf8.fromBytes(decryptedBytes);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nmodule.exports = {\n  hashFileWithSalt256,\n  verifyHashFileWithSalt256,\n  keyString256,\n  aesEncrypt,\n  aesDecrypt\n};","map":{"version":3,"sources":["/Users/alvandsadeghi/Desktop/Projects/Final CryptoCopyright/Crypto-Copyright/src/utils/creepto.js"],"names":["crypto","require","aes","hashFileWithSalt256","buffer","salt","randomBytes","hash","createHash","hashDigest","update","Buffer","concat","digest","verifyHashFileWithSalt256","keyString256","password","key","aesEncrypt","value","valueBytes","utils","utf8","toBytes","aesCtr","ModeOfOperation","ctr","Counter","encryptedBytes","encrypt","hex","fromBytes","error","console","aesDecrypt","givenKey","encryptedHex","decryptedBytes","decrypt","module","exports"],"mappings":"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","sourcesContent":["const crypto = require(\"crypto\");\nconst aes= require(\"aes-js\")\n\nlet hashFileWithSalt256 = (buffer,salt) => {\n  if(typeof salt === 'undefined') {\n    salt = crypto.randomBytes(16)\n  }\n  let hash = crypto.createHash(\"sha256\");\n  let hashDigest = hash.update(Buffer.concat([buffer,salt])).digest('hex')\n  return {hashDigest,salt}\n};\n\nlet verifyHashFileWithSalt256 = (hash, salt, buffer) => {\n  let hashDigest = crypto.createHash(\"sha256\").update(Buffer.concat(\n    [buffer,salt])).digest(\"hex\")\n  return hash === hashDigest\n}\n\nlet keyString256 = (password, salt) => {\n  if(typeof salt === 'undefined') {\n    salt = crypto.randomBytes(16)\n  }\n  let key = crypto.createHash(\"sha256\").update(password).digest()\n  return {key, salt}\n}\n\nlet aesEncrypt = (key,value) => {\n  try{\n    let valueBytes = aes.utils.utf8.toBytes(value)\n    let aesCtr = new aes.ModeOfOperation.ctr(key, new aes.Counter(5));\n    let encryptedBytes = aesCtr.encrypt(valueBytes)\n    return aes.utils.hex.fromBytes(encryptedBytes)\n  }\n  catch(error) {\n    console.error(error)\n  }\n}\nlet aesDecrypt = (givenKey , encryptedHex) => {\n  let encryptedBytes = aes.utils.hex.toBytes(encryptedHex);\n  try {\n    let aesCtr = new aes.ModeOfOperation.ctr(givenKey, new aes.Counter(5));\n    let decryptedBytes = aesCtr.decrypt(encryptedBytes);\n\n    return aes.utils.utf8.fromBytes(decryptedBytes);\n  }\n  catch(error) {\n    console.error(error)\n  }\n}\n\nmodule.exports = {hashFileWithSalt256,verifyHashFileWithSalt256,keyString256, aesEncrypt, aesDecrypt}\n"]},"metadata":{},"sourceType":"module"}