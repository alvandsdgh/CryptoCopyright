{"ast":null,"code":"const Request = require(\"superagent\"),\n      helper = require(\"../helper.js\");\n\nlet REMOTE = null;\n\nmodule.exports = url => {\n  if (url) REMOTE = url;else REMOTE = 'https://explorer.mvs.org/api/';\n  return {\n    height: getHeight,\n    transaction: {\n      get: getTx,\n      list: listTxs,\n      broadcast: broadcastTx\n    },\n    block: {\n      get: getBlock,\n      list: listBlocks,\n      blocktime: getBlocktime\n    },\n    address: {\n      txs: listAddressTxs\n    },\n    addresses: {\n      txs: listAllAddressesTxs,\n      listTxs: listAddressesTxs\n    },\n    pricing: {\n      tickers: listTickers\n    },\n    avatar: {\n      extract: helper.avatar.extract,\n      get: getAvatar,\n      available: getAvatarAvailable,\n      list: listAvatars\n    },\n    MST: {\n      get: getAsset,\n      list: listAssets,\n      icons: listIcons\n    },\n    MIT: {\n      get: getMIT,\n      list: listMIT\n    },\n    balance: {\n      all: helper.balances.all,\n      addresses: helper.balances.addresses\n    },\n    suggest: {\n      avatar: suggestAvatar,\n      address: suggestAddress,\n      tx: suggestTx,\n      block: suggestBlock,\n      mst: suggestMst,\n      mit: suggestMit,\n      all: suggestAll\n    },\n    multisig: {\n      add: addMultisigWallet,\n      get: getMultisigWallet\n    },\n    bridge: {\n      whitelist: listBridgeMst\n    },\n    utxo: {\n      get: getUtxo\n    },\n    cert: {\n      get: getCert\n    },\n    output: {\n      get: getOutput\n    }\n  };\n};\n\nfunction getHeight() {\n  return get(\"\".concat(REMOTE, \"height\"));\n}\n\nfunction getBlocktime(downscale) {\n  return getBlockStats(undefined, downscale).then(stats => stats[0][1]);\n}\n\nfunction getBlockStats(type, downscale) {\n  return get(\"\".concat(REMOTE, \"stats/block?type=\").concat(type, \"&downscale=\").concat(downscale));\n}\n\nfunction getTx(hash) {\n  return get(\"\".concat(REMOTE, \"tx/\").concat(hash));\n}\n\nfunction listTickers() {\n  return get(\"\".concat(REMOTE, \"pricing/tickers\"));\n}\n\nfunction listTxs(page = 0, items_per_page = 10) {\n  return get(\"\".concat(REMOTE, \"txs?page=\").concat(page));\n}\n\nfunction addMultisigWallet(wallet) {\n  return post(\"https://metastore.mvs.org/multisig\", wallet);\n}\n\nfunction getMultisigWallet(address) {\n  return get(\"https://metastore.mvs.org/multisig/\".concat(address));\n}\n\nfunction broadcastTx(tx) {\n  return post(\"\".concat(REMOTE, \"tx\"), {\n    tx: tx\n  });\n}\n\nfunction getBlock(hash) {\n  return get(\"\".concat(REMOTE, \"block/\").concat(hash));\n}\n\nfunction listBlocks(page) {\n  return get(\"\".concat(REMOTE, \"blocks/\").concat(page));\n}\n\nfunction getAsset(symbol) {\n  return get(\"\".concat(REMOTE, \"asset/\").concat(symbol)).then(result => result[0]);\n}\n\nfunction listAssets() {\n  return get(\"\".concat(REMOTE, \"assets\"));\n}\n\nfunction listIcons() {\n  return get(\"\".concat(REMOTE, \"assets/icons\"));\n}\n\nfunction getMIT(symbol) {\n  return get(\"\".concat(REMOTE, \"mits/\").concat(symbol, \"?show_invalidated=1\")).then(result => result);\n}\n\nfunction listMIT() {\n  return get(\"\".concat(REMOTE, \"mits\"));\n}\n\nfunction getAvatar(symbol, showInvalidated = 0) {\n  return get(\"\".concat(REMOTE, \"avatar/\").concat(symbol)).then(result => result);\n}\n\nfunction getAvatarAvailable(symbol) {\n  return get(\"\".concat(REMOTE, \"v2/avatar/available/\").concat(symbol)).then(result => result);\n}\n\nfunction listAvatars() {\n  return get(\"\".concat(REMOTE, \"avatars\"));\n}\n\nfunction listAddressTxs(address, options) {\n  return listAllAddressesTxs([address], options);\n}\n\nfunction suggestAvatar(prefix) {\n  return get(\"\".concat(REMOTE, \"suggest/avatar/\").concat(prefix));\n}\n\nfunction suggestAddress(prefix) {\n  return get(\"\".concat(REMOTE, \"suggest/address/\").concat(prefix));\n}\n\nfunction suggestTx(prefix) {\n  return get(\"\".concat(REMOTE, \"suggest/tx/\").concat(prefix));\n}\n\nfunction suggestBlock(prefix) {\n  return get(\"\".concat(REMOTE, \"suggest/blocks/\").concat(prefix));\n}\n\nfunction suggestMst(prefix) {\n  return get(\"\".concat(REMOTE, \"suggest/asset/\").concat(prefix));\n}\n\nfunction suggestMit(prefix) {\n  return get(\"\".concat(REMOTE, \"suggest/mit/\").concat(prefix));\n}\n\nfunction suggestAll(prefix) {\n  return get(\"\".concat(REMOTE, \"suggest/all/\").concat(prefix));\n}\n\nfunction listBridgeMst() {\n  return get(\"\".concat(REMOTE, \"bridge/whitelist\"));\n}\n\nfunction listAllAddressesTxs(addresses, options = {}) {\n  let url = \"\".concat(REMOTE, \"addresses/txs?addresses=\") + addresses.join('&addresses=');\n  if (options.max_height) url += '&max_height=' + options.max_height;\n  if (options.min_height) url += '&min_height=' + options.min_height;\n  if (options.max_time) url += '&max_time=' + options.max_time;\n  if (options.min_time) url += '&min_time=' + options.min_time;\n  return get(url);\n}\n\nfunction listAddressesTxs(addresses, options = {}) {\n  let url = \"\".concat(REMOTE, \"v2/addresses/txs?addresses=\") + addresses.join('&addresses=');\n  if (options.min_height) url += '&min_height=' + options.min_height;\n  return get(url);\n}\n\nfunction getUtxo(addresses, options = {}) {\n  let url = \"\".concat(REMOTE, \"v2/utxo?addresses=\") + addresses.join('&addresses=');\n  if (options.sort) url += '&sort=' + options.sort;\n  if (options.maxHeight) url += '&maxHeight=' + options.maxHeight;\n  if (options.target) url += '&target=' + options.target;\n  if (options.limit) url += '&limit=' + options.limit;\n  return get(url);\n}\n\nfunction getCert(symbol, type) {\n  return get(\"\".concat(REMOTE, \"v2/cert?symbol=\").concat(symbol, \"&type=\").concat(type));\n}\n\nfunction getOutput(hash, index) {\n  return get(\"\".concat(REMOTE, \"v2/output/\").concat(hash, \"/\").concat(index));\n}\n\nfunction get(url, parameters) {\n  return new Promise((resolve, reject) => {\n    return Request.get(url).send().set('accept', 'json').end((err, response) => {\n      try {\n        response = JSON.parse(response.text);\n      } catch (e) {}\n\n      if (err) {\n        reject(Error(err.message));\n      } else if (response.error != undefined) reject({\n        name: response.error.code,\n        message: response.error.message\n      });else {\n        resolve(response.result);\n      }\n    });\n  });\n}\n\nfunction post(url, data) {\n  return new Promise((resolve, reject) => {\n    return Request.post(url).send(data).set('accept', 'json').end((err, response) => {\n      try {\n        response = JSON.parse(response.text);\n\n        if (err) {\n          reject(Error(err.message));\n        } else if (response.result.error != undefined) reject(Error(response.result.error));else {\n          resolve(response.result);\n        }\n      } catch (e) {}\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}